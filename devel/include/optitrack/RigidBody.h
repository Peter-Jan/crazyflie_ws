// Generated by gencpp from file optitrack/RigidBody.msg
// DO NOT EDIT!


#ifndef OPTITRACK_MESSAGE_RIGIDBODY_H
#define OPTITRACK_MESSAGE_RIGIDBODY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Point.h>

namespace optitrack
{
template <class ContainerAllocator>
struct RigidBody_
{
  typedef RigidBody_<ContainerAllocator> Type;

  RigidBody_()
    : id(0)
    , tracking_valid(false)
    , mrk_mean_error(0.0)
    , pose()
    , markers()  {
    }
  RigidBody_(const ContainerAllocator& _alloc)
    : id(0)
    , tracking_valid(false)
    , mrk_mean_error(0.0)
    , pose(_alloc)
    , markers(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef uint8_t _tracking_valid_type;
  _tracking_valid_type tracking_valid;

   typedef double _mrk_mean_error_type;
  _mrk_mean_error_type mrk_mean_error;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _markers_type;
  _markers_type markers;




  typedef boost::shared_ptr< ::optitrack::RigidBody_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::optitrack::RigidBody_<ContainerAllocator> const> ConstPtr;

}; // struct RigidBody_

typedef ::optitrack::RigidBody_<std::allocator<void> > RigidBody;

typedef boost::shared_ptr< ::optitrack::RigidBody > RigidBodyPtr;
typedef boost::shared_ptr< ::optitrack::RigidBody const> RigidBodyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::optitrack::RigidBody_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::optitrack::RigidBody_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace optitrack

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'optitrack': ['/home/peter/crazyflie_ws/src/optitrack/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::optitrack::RigidBody_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::optitrack::RigidBody_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::optitrack::RigidBody_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::optitrack::RigidBody_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::optitrack::RigidBody_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::optitrack::RigidBody_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::optitrack::RigidBody_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8bb046602d710c6de10ba270a0a2080b";
  }

  static const char* value(const ::optitrack::RigidBody_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8bb046602d710c6dULL;
  static const uint64_t static_value2 = 0xe10ba270a0a2080bULL;
};

template<class ContainerAllocator>
struct DataType< ::optitrack::RigidBody_<ContainerAllocator> >
{
  static const char* value()
  {
    return "optitrack/RigidBody";
  }

  static const char* value(const ::optitrack::RigidBody_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::optitrack::RigidBody_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Optitrack rigid body\n\
int32                 id\n\
bool                  tracking_valid\n\
float64               mrk_mean_error\n\
geometry_msgs/Pose    pose\n\
geometry_msgs/Point[] markers\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::optitrack::RigidBody_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::optitrack::RigidBody_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.tracking_valid);
      stream.next(m.mrk_mean_error);
      stream.next(m.pose);
      stream.next(m.markers);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RigidBody_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::optitrack::RigidBody_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::optitrack::RigidBody_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "tracking_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tracking_valid);
    s << indent << "mrk_mean_error: ";
    Printer<double>::stream(s, indent + "  ", v.mrk_mean_error);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "markers[]" << std::endl;
    for (size_t i = 0; i < v.markers.size(); ++i)
    {
      s << indent << "  markers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.markers[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPTITRACK_MESSAGE_RIGIDBODY_H
